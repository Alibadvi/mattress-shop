generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  phone      String     @unique
  password   String
  orders     Order[]
  warranties Warranty[]
  reviews    Review[]
  createdAt  DateTime   @default(now())
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String?         // ⬅ legacy (optional now); we won’t use this going forward
  stock       Int
  categoryId  Int
  category    Category        @relation(fields: [categoryId], references: [id])
  filters     ProductFilter[]
  reviews     Review[]
  warranties  Warranty[]
  createdAt   DateTime        @default(now())

  images      ProductImage[]  // ⬅ new relation
}

model ProductFilter {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  size      String?
  firmness  String?
  material  String?
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  items     Json
  total     Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Warranty {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  serialCode  String   @unique
  activatedAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model AdminUser {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String?
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  data        Bytes    // stored as bytea in Postgres
  contentType String
  filename    String
  size        Int
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([productId])
}
